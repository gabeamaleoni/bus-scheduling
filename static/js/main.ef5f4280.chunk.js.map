{"version":3,"sources":["app/bus-schedule/duck/actions.js","app/bus-schedule/duck/types.js","app/bus-schedule/BusRow.js","app/bus-schedule/ScheduleTimeline.js","utils/bus-scheduling-input.js","app/bus-schedule/BusSchedule.js","app/AppBody.js","serviceWorker.js","app/bus-schedule/duck/reducers.js","reducers.js","index.js"],"names":["removeProvisionalBus","busArr","filter","bus","trips","length","onTripSelect","data","dispatch","getState","newBusArr","busSchedule","provisionalBus","id","type","payload","selectedTrip","push","handleProvisionalBus","onAssignTrip","targetBusIdx","tripsArr","currentBus","busOfSelectedTrip","targetBus","selectedTripObj","selectedTripId","i","checkIfTripsConflict","rejectAssignTrip","trip","idx","tripsConflict","busId","targetBusTripsArr","startTime","endTime","getSelectedTrip","props","isSelected","BusRow","react_default","a","createElement","className","onClick","busIdx","concat","calculateTimeframe","timeframe","map","key","e","style","left","width","calculateWidth","ScheduleTimeline","min","hour","busSchedulingInput","BusSchedule","params","timeToShow","allTimes","forEach","Math","apply","Infinity","Date","toISOString","substr","event","stopPropagation","_this","renderErrors","errors","renderTimeline","scheduleTimeInHours","interval","bus_schedule_ScheduleTimeline","renderBusRows","bus_schedule_BusRow","this","updatedTripsArr","scheduleData","startingMinute","Component","connect","state","AppBody","app_bus_schedule_BusSchedule","Boolean","window","location","hostname","match","defaultState","rootReducer","combineReducers","arguments","undefined","action","Object","objectSpread","updatedErrors","middleware","applyMiddleware","thunk","logger","store","createStore","ReactDOM","render","es","src_app_AppBody","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef5f4280.chunk.js","sourcesContent":["// bus-schedule/duck/actions.js\nimport * as types from './types'\n\nconst acceptBusScheduleLoad = json => ({\n\ttype: types.ON_BUS_SCHEDULE_LOAD,\n\tpayload: json\n})\n\nexport const onBusScheduleLoad = trips => dispatch => {\n\tconst updatedTripsArr = []\n\tconst busArr = []\n\tconst scheduleData = {}\n\tconst scheduleTimeInHours = []\n\tconst totalScheduleTimeMin = 720 // 12 hours in min\n\tlet startingMinute = 0\n\twhile (startingMinute <= totalScheduleTimeMin) {\n\t\tstartingMinute++\n\n\t\tif (startingMinute % 60 === 0) {\n\t\t\tscheduleTimeInHours.push({\n\t\t\t\thour: startingMinute / 60,\n\t\t\t\tmin: startingMinute\n\t\t\t})\n\t\t\tcontinue\n\t\t}\n\t}\n\n\tif (trips && trips.length) {\n\t\ttrips.forEach((trip, idx) => {\n\t\t\ttrip.busId = idx + 1\n\t\t\tupdatedTripsArr.push(trip)\n\t\t\tbusArr.push({\n\t\t\t\ttrips: [trip],\n\t\t\t\tid: idx + 1\n\t\t\t})\n\t\t})\n\t}\n\n\tscheduleData.updatedTripsArr = updatedTripsArr\n\tscheduleData.busArr = busArr\n\tscheduleData.scheduleTimeInHours = scheduleTimeInHours\n\tdispatch(acceptBusScheduleLoad(scheduleData))\n}\n\nconst handleProvisionalBus = data => ({\n\ttype: types.ON_ADD_PROVISIONAL_BUS,\n\tpayload: data\n})\n\nconst removeProvisionalBus = busArr => {\n\treturn busArr.filter(bus => {\n\t\treturn bus.trips.length > 0\n\t})\n}\n\nexport const onTripSelect = data => (dispatch, getState) => {\n\tlet newBusArr = getState().busSchedule.busArr\n\tlet provisionalBus = {\n\t\ttrips: [],\n\t\tid: newBusArr.length + 1\n\t}\n\tdispatch({\n\t\ttype: types.ON_TRIP_SELECT,\n\t\tpayload: data\n\t})\n\tlet currentSelectedTripId = getState().busSchedule.selectedTrip\n\t\t? getState().busSchedule.selectedTrip.id\n\t\t: null\n\n\t// create a new bus at the bottom of bus array\n\tif (currentSelectedTripId) {\n\t\tnewBusArr.push(provisionalBus)\n\t} else {\n\t\tnewBusArr = removeProvisionalBus(newBusArr)\n\t}\n\tdispatch(handleProvisionalBus(newBusArr))\n}\n\nconst acceptAssignTrip = data => ({\n\ttype: types.ACCEPT_ASSIGN_TRIP,\n\tpayload: data\n})\nconst rejectAssignTrip = newBusArr => ({\n\ttype: types.REJECT_ASSIGN_TRIP,\n\tpayload: newBusArr\n})\n\nexport const onAssignTrip = targetBusIdx => (dispatch, getState) => {\n\tconst tripsArr = getState().busSchedule.tripsArr\n\tconst busArr = getState().busSchedule.busArr\n\tconst currentBus = getState().busSchedule.busOfSelectedTrip\n\tconst targetBus = busArr[targetBusIdx]\n\tlet selectedTripObj = {}\n\tconst selectedTripId = getState().busSchedule.selectedTrip\n\t\t? getState().busSchedule.selectedTrip.id\n\t\t: ''\n\n\t// Get the trip that will be assigned to target bus from the total trips array\n\tfor (let i = 0; i < tripsArr.length; i++) {\n\t\tif (tripsArr[i].id === selectedTripId) {\n\t\t\tselectedTripObj = tripsArr[i]\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// Check if the trips conflict\n\tconst tripsConflict = checkIfTripsConflict(targetBus, selectedTripObj)\n\n\tif (tripsConflict) {\n\t\tconst newBusArr = removeProvisionalBus(busArr)\n\t\tdispatch(rejectAssignTrip(newBusArr))\n\t} else {\n\t\t// Remove the trip from it's current bus\n\t\tif (selectedTripId) {\n\t\t\tcurrentBus.trips = currentBus.trips.filter(trip => {\n\t\t\t\treturn trip.id !== selectedTripId\n\t\t\t})\n\t\t\tbusArr[currentBus.idx] = currentBus\n\t\t}\n\n\t\t// Append the trip into the target bus\n\t\ttargetBus.trips.push(selectedTripObj)\n\t\tbusArr[targetBusIdx] = targetBus\n\t\tconst newBusArr = busArr.filter(bus => {\n\t\t\treturn bus.trips && bus.trips.length !== 0\n\t\t})\n\n\t\tdispatch(\n\t\t\tacceptAssignTrip({\n\t\t\t\tbusArr: newBusArr,\n\t\t\t\ttargetBusIdx: targetBusIdx,\n\t\t\t\tselectedTripObj: selectedTripObj\n\t\t\t})\n\t\t)\n\t}\n}\n\nconst checkIfTripsConflict = (targetBus, selectedTripObj) => {\n\tlet tripsConflict = false\n\n\tif (targetBus.id === selectedTripObj.busId) {\n\t\t// If we are trying to assign trip to the bus it's already assigned to\n\t\treturn tripsConflict\n\t}\n\tconst targetBusTripsArr = targetBus.trips\n\n\tfor (var i = 0; i < targetBusTripsArr.length; i++) {\n\t\tif (\n\t\t\t(targetBusTripsArr[i].startTime < selectedTripObj.startTime &&\n\t\t\t\ttargetBusTripsArr[i].endTime > selectedTripObj.startTime) ||\n\t\t\t(targetBusTripsArr[i].startTime >= selectedTripObj.startTime &&\n\t\t\t\ttargetBusTripsArr[i].endTime <= selectedTripObj.endTime)\n\t\t) {\n\t\t\ttripsConflict = true\n\t\t\tbreak\n\t\t}\n\n\t\tif (\n\t\t\ttargetBusTripsArr[i].startTime < selectedTripObj.endTime &&\n\t\t\ttargetBusTripsArr[i].endTime > selectedTripObj.endTime\n\t\t) {\n\t\t\ttripsConflict = true\n\t\t\tbreak\n\t\t}\n\t}\n\treturn tripsConflict\n}\n","// bus-schedule/duck/types.js\n\nexport const ON_BUS_SCHEDULE_LOAD = 'ON_BUS_SCHEDULE_LOAD'\nexport const ON_ADD_PROVISIONAL_BUS = 'ON_ADD_PROVISIONAL_BUS'\nexport const ON_TRIP_SELECT = 'ON_TRIP_SELECT'\nexport const ON_ASSIGN_TRIP = 'ON_ASSIGN_TRIP'\nexport const ACCEPT_ASSIGN_TRIP = 'ACCEPT_ASSIGN_TRIP'\nexport const REJECT_ASSIGN_TRIP = 'REJECT_ASSIGN_TRIP'\n","import React from 'react'\n\nconst getSelectedTrip = (id, props) => {\n\tlet isSelected = false\n\tif (props.selectedTrip) {\n\t\tisSelected = id === props.selectedTrip\n\t}\n\treturn isSelected\n}\n\nconst BusRow = props => {\n\treturn (\n\t\t<div className='BusRow' onClick={() => props.onAssignTrip(props.busIdx)}>\n\t\t\t<div className='BusRow__left'>\n\t\t\t\t<span>\n\t\t\t\t\t{props.trips.length ? `Bus: ${props.busIdx + 1}` : 'New Bus'}\n\t\t\t\t</span>\n\t\t\t\t{props.trips && props.trips.length ? (\n\t\t\t\t\t<span className='BusRow__time-window'>\n\t\t\t\t\t\t{props.calculateTimeframe({\n\t\t\t\t\t\t\ttrips: props.trips,\n\t\t\t\t\t\t\ttimeframe: 'earliest'\n\t\t\t\t\t\t})}{' '}\n\t\t\t\t\t\t-{' '}\n\t\t\t\t\t\t{props.calculateTimeframe({\n\t\t\t\t\t\t\ttrips: props.trips,\n\t\t\t\t\t\t\ttimeframe: 'latest'\n\t\t\t\t\t\t})}{' '}\n\t\t\t\t\t</span>\n\t\t\t\t) : (\n\t\t\t\t\t''\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div className='BusRow__right'>\n\t\t\t\t{props.trips && props.trips.length\n\t\t\t\t\t? props.trips.map((trip, idx) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\t\t\t\tclassName={`BusRow__trip ${\n\t\t\t\t\t\t\t\t\t\tgetSelectedTrip(trip.id, props) ? 'is-selected' : ''\n\t\t\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\t\t\tonClick={e => props.onTripSelect(e, trip.id, props.busIdx)}\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tleft: trip.startTime,\n\t\t\t\t\t\t\t\t\t\twidth: props.calculateWidth(trip.startTime, trip.endTime)\n\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t{trip.id}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t  })\n\t\t\t\t\t: ''}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default BusRow\n","import React from 'react'\n\nconst ScheduleTimeline = props => {\n\treturn (\n\t\t<div className='ScheduleTimeline__hour' style={{ left: props.min }}>\n\t\t\t{props.hour ? `${props.hour}:00` : ''}\n\t\t</div>\n\t)\n}\n\nexport default ScheduleTimeline\n","const busSchedulingInput = [\n\t{ id: 1, startTime: 30, endTime: 150 },\n\t{ id: 2, startTime: 180, endTime: 300 },\n\t{ id: 3, startTime: 330, endTime: 450 },\n\t{ id: 4, startTime: 40, endTime: 130 },\n\t{ id: 5, startTime: 160, endTime: 250 },\n\t{ id: 6, startTime: 280, endTime: 370 },\n\t{ id: 7, startTime: 400, endTime: 490 },\n\t{ id: 8, startTime: 80, endTime: 240 },\n\t{ id: 9, startTime: 280, endTime: 430 }\n]\n\nexport default busSchedulingInput\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { onBusScheduleLoad, onTripSelect, onAssignTrip } from './duck/actions'\nimport BusRow from './BusRow'\nimport ScheduleTimeline from './ScheduleTimeline'\nimport busSchedulingInput from '../../utils/bus-scheduling-input'\nimport './BusSchedule.css'\n\nclass BusSchedule extends Component {\n\tcomponentDidMount() {\n\t\tthis.props.dispatch(onBusScheduleLoad(busSchedulingInput))\n\t}\n\n\tcalculateWidth = (startTime, endTime) => {\n\t\tconst tripWidth = endTime - startTime\n\t\treturn tripWidth\n\t}\n\n\tcalculateTimeframe = params => {\n\t\tlet allTimes = []\n\t\tlet timeToShow\n\n\t\tparams.trips.forEach(trip => {\n\t\t\tallTimes.push(\n\t\t\t\tparams.timeframe === 'earliest' ? trip.startTime : trip.endTime\n\t\t\t)\n\t\t})\n\n\t\ttimeToShow =\n\t\t\tparams.timeframe === 'earliest'\n\t\t\t\t? Math.min(...allTimes)\n\t\t\t\t: Math.min(...allTimes)\n\t\tif (timeToShow && timeToShow !== Infinity && timeToShow !== -Infinity) {\n\t\t\ttimeToShow = new Date(timeToShow * 1000).toISOString().substr(15, 4)\n\t\t}\n\t\treturn timeToShow\n\t}\n\n\tonTripSelect = (event, id, busIdx) => {\n\t\tevent.stopPropagation()\n\t\tthis.props.dispatch(onTripSelect({ id: id, busIdx: busIdx }))\n\t}\n\n\tonAssignTrip = targetBusIdx => {\n\t\tif (this.props.busSchedule.selectedTrip) {\n\t\t\tthis.props.dispatch(onAssignTrip(targetBusIdx))\n\t\t}\n\t}\n\n\trenderErrors = () => {\n\t\treturn this.props.busSchedule.errors.length ? (\n\t\t\t<p className='BusSchedule__error'>{this.props.busSchedule.errors[0]}</p>\n\t\t) : (\n\t\t\t''\n\t\t)\n\t}\n\n\trenderTimeline = () => {\n\t\treturn (\n\t\t\t<div className='BusSchedule__timeline'>\n\t\t\t\t{this.props.busSchedule.scheduleTimeInHours &&\n\t\t\t\t\tthis.props.busSchedule.scheduleTimeInHours.map(interval => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<ScheduleTimeline\n\t\t\t\t\t\t\t\tkey={interval.hour}\n\t\t\t\t\t\t\t\thour={interval.hour}\n\t\t\t\t\t\t\t\tmin={interval.min}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t</div>\n\t\t)\n\t}\n\n\trenderBusRows = () => {\n\t\tlet busArr = this.props.busSchedule.busArr\n\t\treturn busArr.length ? (\n\t\t\tbusArr.map((bus, idx) => {\n\t\t\t\t// Only show buses that have trips, or if it's the last provisional bus\n\t\t\t\treturn (bus.trips && bus.trips.length) || idx === busArr.length - 1 ? (\n\t\t\t\t\t<BusRow\n\t\t\t\t\t\tonTripSelect={this.onTripSelect}\n\t\t\t\t\t\tonAssignTrip={this.onAssignTrip}\n\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\tbusIdx={idx}\n\t\t\t\t\t\tid={bus.id}\n\t\t\t\t\t\tselectedTrip={\n\t\t\t\t\t\t\tthis.props.busSchedule.selectedTrip\n\t\t\t\t\t\t\t\t? this.props.busSchedule.selectedTrip.id\n\t\t\t\t\t\t\t\t: ''\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcalculateWidth={this.calculateWidth}\n\t\t\t\t\t\tcalculateTimeframe={this.calculateTimeframe}\n\t\t\t\t\t\ttrips={bus.trips}\n\t\t\t\t\t/>\n\t\t\t\t) : (\n\t\t\t\t\t''\n\t\t\t\t)\n\t\t\t})\n\t\t) : (\n\t\t\t<p className='BusSchedule__message'>No bus schedule data</p>\n\t\t)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<section className='BusSchedule'>\n\t\t\t\t{this.renderTimeline()}\n\t\t\t\t{this.renderBusRows()}\n\t\t\t\t{this.renderErrors()}\n\t\t\t</section>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = state => ({\n\tbusSchedule: state.busSchedule\n})\n\nexport default connect(mapStateToProps)(BusSchedule)\n","import React, { Component } from 'react'\nimport BusSchedule from './bus-schedule/BusSchedule'\nimport './AppBody.css'\n\nclass AppBody extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className='AppBody'>\n\t\t\t\t<header className='AppBody__header'>\n\t\t\t\t\t<h5>Bus Scheduling</h5>\n\t\t\t\t</header>\n\t\t\t\t<BusSchedule />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default AppBody\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// bus-schedule/duck/reducers.js\nimport * as types from './types'\n\nconst defaultState = {\n\ttripsArr: [],\n\tbusArr: [],\n\terrors: [],\n\tselectedTrip: null\n}\n\nexport default (state = defaultState, action) => {\n\tswitch (action.type) {\n\t\tcase types.ON_BUS_SCHEDULE_LOAD:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttripsArr: action.payload.updatedTripsArr,\n\t\t\t\tbusArr: action.payload.busArr,\n\t\t\t\tscheduleTimeInHours: action.payload.scheduleTimeInHours\n\t\t\t}\n\n\t\tcase types.ON_TRIP_SELECT:\n\t\t\tlet selectedTrip\n\t\t\tconst busOfSelectedTrip = state.busArr[action.payload.busIdx]\n\n\t\t\tif (\n\t\t\t\t// if user clicks currently selected trip\n\t\t\t\tstate.selectedTrip &&\n\t\t\t\taction.payload.id === state.selectedTrip.id\n\t\t\t) {\n\t\t\t\tselectedTrip = null\n\t\t\t} else {\n\t\t\t\tselectedTrip = action.payload\n\t\t\t}\n\n\t\t\tbusOfSelectedTrip.idx = action.payload.busIdx\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tselectedTrip: selectedTrip,\n\t\t\t\tbusOfSelectedTrip: busOfSelectedTrip,\n\t\t\t\terrors: []\n\t\t\t}\n\n\t\tcase types.ON_ADD_PROVISIONAL_BUS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tbusArr: action.payload\n\t\t\t}\n\n\t\tcase types.ACCEPT_ASSIGN_TRIP:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tbusArr: action.payload.busArr,\n\t\t\t\tselectedTrip: null,\n\t\t\t\terrors: []\n\t\t\t}\n\n\t\tcase types.REJECT_ASSIGN_TRIP:\n\t\t\tconst error =\n\t\t\t\t'A bus can only do one trip at a time. Try a different time slot.'\n\t\t\tconst updatedErrors = state.errors\n\t\t\tupdatedErrors.push(error)\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tselectedTrip: null,\n\t\t\t\tbusArr: action.payload,\n\t\t\t\terrors: updatedErrors\n\t\t\t}\n\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n","import { combineReducers } from 'redux'\nimport busScheduleReducer from './app/bus-schedule/duck/reducers'\n\nconst rootReducer = combineReducers({\n\tbusSchedule: busScheduleReducer\n})\n\nexport default rootReducer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport AppBody from './app/AppBody'\nimport * as serviceWorker from './serviceWorker'\nimport rootReducer from './reducers'\nimport thunk from 'redux-thunk'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport logger from 'redux-logger'\n\nconst middleware = applyMiddleware(thunk, logger)\nconst store = createStore(rootReducer, middleware)\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<AppBody />\n\t</Provider>,\n\tdocument.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}