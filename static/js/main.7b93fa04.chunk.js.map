{"version":3,"sources":["app/bus-schedule/duck/actions.js","app/bus-schedule/duck/types.js","app/bus-schedule/BusRow.js","app/bus-schedule/ScheduleTimeline.js","utils/bus-scheduling-input.js","utils/busHelpers.js","app/bus-schedule/BusSchedule.js","app/AppBody.js","serviceWorker.js","app/bus-schedule/duck/reducers.js","reducers.js","index.js"],"names":["removeProvisionalBus","busArr","filter","bus","trips","length","onTripSelect","data","dispatch","getState","console","log","newBusArr","busSchedule","provisionalBus","id","type","payload","selectedTrip","push","handleProvisionalBus","onAssignTrip","targetBusIdx","selectedTripObj","tripsArr","currentBus","busOfSelectedTrip","targetBus","selectedTripId","find","checkIfTripsConflict","rejectAssignTrip","trip","idx","tripsConflict","sortedBusTrips","sort","a","b","startTime","i","endTime","BusRow","props","react_default","createElement","className","concat","busIdx","calculateTimeframe","timeframe","onClick","style","left","width","calculateWidth","map","key","e","ScheduleTimeline","min","hour","busSchedulingInput","params","timeToShow","allTimes","forEach","Math","apply","max","Infinity","Date","toISOString","substr","BusSchedule","event","stopPropagation","_this","renderErrors","errors","renderTimeline","scheduleTimeInHours","interval","bus_schedule_ScheduleTimeline","renderBusRows","bus_schedule_BusRow","this","busSchedulingJSON","updatedTripsArr","scheduleData","startingMinute","Component","connect","state","AppBody","app_bus_schedule_BusSchedule","Boolean","window","location","hostname","match","defaultState","rootReducer","combineReducers","arguments","undefined","action","Object","objectSpread","updatedErrors","middleware","applyMiddleware","thunk","logger","store","createStore","ReactDOM","render","es","src_app_AppBody","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b93fa04.chunk.js","sourcesContent":["// bus-schedule/duck/actions.js\nimport * as types from './types'\n\nconst acceptBusScheduleLoad = json => ({\n\ttype: types.ON_BUS_SCHEDULE_LOAD,\n\tpayload: json\n})\n\nexport const onBusScheduleLoad = trips => dispatch => {\n\tconst updatedTripsArr = []\n\tconst busArr = []\n\tconst scheduleData = {}\n\tconst scheduleTimeInHours = [{ hour: 0, min: 0 }]\n\tconst totalScheduleTimeMin = 720 // 12 hours in min\n\tlet startingMinute = 0\n\twhile (startingMinute <= totalScheduleTimeMin) {\n\t\tstartingMinute++\n\t\tif (startingMinute % 60 === 0 || startingMinute === 0) {\n\t\t\tscheduleTimeInHours.push({\n\t\t\t\thour: startingMinute / 60,\n\t\t\t\tmin: startingMinute\n\t\t\t})\n\t\t\tcontinue\n\t\t}\n\t}\n\n\tif (trips && trips.length) {\n\t\ttrips.forEach(trip => {\n\t\t\tupdatedTripsArr.push(trip)\n\t\t\tbusArr.push({\n\t\t\t\ttrips: [trip]\n\t\t\t})\n\t\t})\n\t}\n\n\tscheduleData.updatedTripsArr = updatedTripsArr\n\tscheduleData.busArr = busArr\n\tscheduleData.scheduleTimeInHours = scheduleTimeInHours\n\tdispatch(acceptBusScheduleLoad(scheduleData))\n}\n\nconst handleProvisionalBus = data => ({\n\ttype: types.ON_ADD_PROVISIONAL_BUS,\n\tpayload: data\n})\n\nconst removeProvisionalBus = busArr => {\n\treturn busArr.filter(bus => {\n\t\treturn bus.trips.length > 0\n\t})\n}\n\nexport const onTripSelect = data => (dispatch, getState) => {\n\tconsole.log('data: ', data)\n\tlet newBusArr = getState().busSchedule.busArr\n\tlet provisionalBus = {\n\t\ttrips: [],\n\t\tid: newBusArr.length + 1\n\t}\n\tdispatch({\n\t\ttype: types.ON_TRIP_SELECT,\n\t\tpayload: data\n\t})\n\tlet currentSelectedTripId = getState().busSchedule.selectedTrip\n\t\t? getState().busSchedule.selectedTrip.id\n\t\t: null\n\n\t// create a new bus at the bottom of bus array\n\tif (currentSelectedTripId) {\n\t\tnewBusArr.push(provisionalBus)\n\t} else {\n\t\tnewBusArr = removeProvisionalBus(newBusArr)\n\t}\n\tdispatch(handleProvisionalBus(newBusArr))\n}\n\nconst acceptAssignTrip = data => ({\n\ttype: types.ACCEPT_ASSIGN_TRIP,\n\tpayload: data\n})\nconst rejectAssignTrip = newBusArr => ({\n\ttype: types.REJECT_ASSIGN_TRIP,\n\tpayload: newBusArr\n})\n\nexport const onAssignTrip = targetBusIdx => (dispatch, getState) => {\n\tconst tripsArr = getState().busSchedule.tripsArr\n\tconst busArr = getState().busSchedule.busArr\n\tconst currentBus = getState().busSchedule.busOfSelectedTrip\n\tconst targetBus = busArr[targetBusIdx]\n\tlet selectedTripObj\n\tconst selectedTripId = getState().busSchedule.selectedTrip\n\t\t? getState().busSchedule.selectedTrip.id\n\t\t: ''\n\n\t// Get the trip that will be assigned to target bus from the total trips array\n\tselectedTripObj = tripsArr.find(tripsArr => tripsArr.id === selectedTripId)\n\n\t// Check if the trips conflict\n\tconst tripsConflict = checkIfTripsConflict(targetBus.trips, selectedTripObj)\n\n\tif (tripsConflict) {\n\t\tconst newBusArr = removeProvisionalBus(busArr)\n\t\tdispatch(rejectAssignTrip(newBusArr))\n\t} else {\n\t\t// Remove the trip from it's current bus\n\t\tif (selectedTripId) {\n\t\t\tcurrentBus.trips = currentBus.trips.filter(trip => {\n\t\t\t\treturn trip.id !== selectedTripId\n\t\t\t})\n\t\t\tbusArr[currentBus.idx] = currentBus\n\t\t}\n\n\t\t// Append the trip into the target bus\n\t\ttargetBus.trips.push(selectedTripObj)\n\t\tbusArr[targetBusIdx] = targetBus\n\t\tconst newBusArr = busArr.filter(bus => {\n\t\t\treturn bus.trips && bus.trips.length !== 0\n\t\t})\n\n\t\tdispatch(\n\t\t\tacceptAssignTrip({\n\t\t\t\tbusArr: newBusArr,\n\t\t\t\ttargetBusIdx: targetBusIdx,\n\t\t\t\tselectedTripObj: selectedTripObj\n\t\t\t})\n\t\t)\n\t}\n}\n\nexport const checkIfTripsConflict = (trips, selectedTrip) => {\n\tlet tripsConflict = false\n\tconst sortedBusTrips = trips.sort((a, b) => a.startTime - b.startTime)\n\n\tif (trips.filter(trip => trip.id === selectedTrip.id).length > 0) {\n\t\t/* targetBus trips contains the element we're looking for */\n\t\treturn tripsConflict\n\t}\n\n\tfor (var i = 0; i < sortedBusTrips.length; i++) {\n\t\tif (\n\t\t\t(sortedBusTrips[i].startTime < selectedTrip.startTime &&\n\t\t\t\tsortedBusTrips[i].endTime > selectedTrip.startTime) ||\n\t\t\t(sortedBusTrips[i].startTime >= selectedTrip.startTime &&\n\t\t\t\tsortedBusTrips[i].endTime <= selectedTrip.endTime) ||\n\t\t\t(sortedBusTrips[i].startTime < selectedTrip.endTime &&\n\t\t\t\tsortedBusTrips[i].endTime > selectedTrip.endTime)\n\t\t) {\n\t\t\ttripsConflict = true\n\t\t\tbreak\n\t\t}\n\t}\n\treturn tripsConflict\n}\n","// bus-schedule/duck/types.js\n\nexport const ON_BUS_SCHEDULE_LOAD = 'ON_BUS_SCHEDULE_LOAD'\nexport const ON_ADD_PROVISIONAL_BUS = 'ON_ADD_PROVISIONAL_BUS'\nexport const ON_TRIP_SELECT = 'ON_TRIP_SELECT'\nexport const ON_ASSIGN_TRIP = 'ON_ASSIGN_TRIP'\nexport const ACCEPT_ASSIGN_TRIP = 'ACCEPT_ASSIGN_TRIP'\nexport const REJECT_ASSIGN_TRIP = 'REJECT_ASSIGN_TRIP'\n","import React from 'react'\nimport { checkIfTripsConflict } from './duck/actions'\n\nconst BusRow = props => {\n\treturn (\n\t\t<div className={`BusRow ${props.selectedTrip ? 'is-hoverable' : ''}`}>\n\t\t\t<div className='BusRow__left'>\n\t\t\t\t<span>\n\t\t\t\t\t{props.trips.length ? `Bus: ${props.busIdx + 1}` : 'New Bus'}\n\t\t\t\t</span>\n\t\t\t\t{props.trips && props.trips.length ? (\n\t\t\t\t\t<span className='BusRow__time-window'>\n\t\t\t\t\t\t{props.calculateTimeframe({\n\t\t\t\t\t\t\ttrips: props.trips,\n\t\t\t\t\t\t\ttimeframe: 'earliest'\n\t\t\t\t\t\t})}{' '}\n\t\t\t\t\t\t-{' '}\n\t\t\t\t\t\t{props.calculateTimeframe({\n\t\t\t\t\t\t\ttrips: props.trips,\n\t\t\t\t\t\t\ttimeframe: 'latest'\n\t\t\t\t\t\t})}{' '}\n\t\t\t\t\t</span>\n\t\t\t\t) : (\n\t\t\t\t\t''\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div className='BusRow__right'>\n\t\t\t\t{console.log('props.selectedTrip: ', props)}\n\t\t\t\t{props.selectedTrip &&\n\t\t\t\t!checkIfTripsConflict(props.trips, props.selectedTrip) ? (\n\t\t\t\t\t<div\n\t\t\t\t\t\tonClick={() => props.onAssignTrip(props.busIdx)}\n\t\t\t\t\t\tclassName='BusRow__trip BusRow__trip_potential'\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tleft: props.selectedTrip.startTime,\n\t\t\t\t\t\t\twidth: props.calculateWidth(\n\t\t\t\t\t\t\t\tprops.selectedTrip.startTime,\n\t\t\t\t\t\t\t\tprops.selectedTrip.endTime\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t+\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t''\n\t\t\t\t)}\n\t\t\t\t{props.trips && props.trips.length\n\t\t\t\t\t? props.trips.map((trip, idx) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\t\t\t\tclassName={`BusRow__trip ${\n\t\t\t\t\t\t\t\t\t\tprops.selectedTrip && trip.id === props.selectedTrip.id\n\t\t\t\t\t\t\t\t\t\t\t? 'is-selected'\n\t\t\t\t\t\t\t\t\t\t\t: ''\n\t\t\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\t\t\tonClick={e => props.onTripSelect(e, trip, props.busIdx)}\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tleft: trip.startTime,\n\t\t\t\t\t\t\t\t\t\twidth: props.calculateWidth(trip.startTime, trip.endTime)\n\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t{trip.id}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t  })\n\t\t\t\t\t: ''}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default BusRow\n","import React from 'react'\n\nconst ScheduleTimeline = props => {\n\treturn (\n\t\t<div className='ScheduleTimeline__hour' style={{ left: props.min }}>\n\t\t\t{props.hour || props.hour === 0 ? `${props.hour}:00` : ''}\n\t\t</div>\n\t)\n}\n\nexport default ScheduleTimeline\n","const busSchedulingInput = [\n\t{ id: 1, startTime: 30, endTime: 150 },\n\t{ id: 2, startTime: 180, endTime: 300 },\n\t{ id: 3, startTime: 330, endTime: 450 },\n\t{ id: 4, startTime: 40, endTime: 130 },\n\t{ id: 5, startTime: 160, endTime: 250 },\n\t{ id: 6, startTime: 280, endTime: 370 },\n\t{ id: 7, startTime: 400, endTime: 490 },\n\t{ id: 8, startTime: 80, endTime: 240 },\n\t{ id: 9, startTime: 280, endTime: 430 }\n]\n\nexport default busSchedulingInput\n","export const calculateTimeframe = (params) => {\n  let allTimes = [];\n  let timeToShow;\n\n  params.trips.forEach((trip) => {\n    allTimes.push(\n      params.timeframe === \"earliest\" ? trip.startTime : trip.endTime\n    );\n  });\n\n  timeToShow =\n    params.timeframe === \"earliest\"\n      ? Math.min(...allTimes)\n      : Math.max(...allTimes);\n\n  if (timeToShow && timeToShow !== Infinity && timeToShow !== -Infinity) {\n    timeToShow = new Date(timeToShow * 1000).toISOString().substr(15, 4);\n  }\n  return timeToShow;\n};\n\nexport const calculateWidth = (startTime, endTime) => {\n  const tripWidth = endTime - startTime;\n  return tripWidth;\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { onBusScheduleLoad, onTripSelect, onAssignTrip } from \"./duck/actions\";\nimport BusRow from \"./BusRow\";\nimport ScheduleTimeline from \"./ScheduleTimeline\";\nimport busSchedulingJSON from \"../../utils/bus-scheduling-input\";\nimport { calculateTimeframe, calculateWidth } from \"../../utils/busHelpers\";\nimport \"./BusSchedule.css\";\n\nclass BusSchedule extends Component {\n  componentDidMount() {\n    this.props.dispatch(onBusScheduleLoad(busSchedulingJSON));\n  }\n\n  onTripSelect = (event, trip, busIdx) => {\n    event.stopPropagation();\n    this.props.dispatch(onTripSelect({ trip, busIdx: busIdx }));\n  };\n\n  onAssignTrip = (targetBusIdx) => {\n    if (this.props.busSchedule.selectedTrip) {\n      this.props.dispatch(onAssignTrip(targetBusIdx));\n    }\n  };\n\n  renderErrors = () => {\n    return this.props.busSchedule.errors.length ? (\n      <p className=\"BusSchedule__error\">{this.props.busSchedule.errors[0]}</p>\n    ) : (\n      \"\"\n    );\n  };\n\n  renderTimeline = () => {\n    return (\n      <div className=\"BusSchedule__timeline\">\n        {this.props.busSchedule.scheduleTimeInHours &&\n          this.props.busSchedule.scheduleTimeInHours.map((interval) => {\n            return (\n              <ScheduleTimeline\n                key={interval.hour}\n                hour={interval.hour}\n                min={interval.min}\n              />\n            );\n          })}\n      </div>\n    );\n  };\n\n  renderBusRows = () => {\n    let busArr = this.props.busSchedule.busArr;\n    return busArr.length ? (\n      busArr.map((bus, idx) => {\n        // Only show buses that have trips, or if it's the last provisional bus\n        return (bus.trips && bus.trips.length) || idx === busArr.length - 1 ? (\n          <BusRow\n            onTripSelect={this.onTripSelect}\n            onAssignTrip={this.onAssignTrip}\n            key={idx}\n            busIdx={idx}\n            id={bus.id}\n            selectedTrip={\n              this.props.busSchedule.selectedTrip\n                ? this.props.busSchedule.selectedTrip\n                : \"\"\n            }\n            calculateWidth={calculateWidth}\n            calculateTimeframe={calculateTimeframe}\n            trips={bus.trips}\n          />\n        ) : (\n          \"\"\n        );\n      })\n    ) : (\n      <p className=\"BusSchedule__message\">No bus schedule data</p>\n    );\n  };\n\n  render() {\n    return (\n      <section className=\"BusSchedule\">\n        <div className=\"BusSchedule__inner\">\n          {this.renderTimeline()}\n          {this.renderBusRows()}\n          {this.renderErrors()}\n        </div>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  busSchedule: state.busSchedule,\n});\n\nexport default connect(mapStateToProps)(BusSchedule);\n","import React, { Component } from 'react'\nimport BusSchedule from './bus-schedule/BusSchedule'\nimport './AppBody.css'\n\nclass AppBody extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className='AppBody'>\n\t\t\t\t<header className='AppBody__header'>\n\t\t\t\t\t<h5>Bus Scheduling</h5>\n\t\t\t\t</header>\n\t\t\t\t<BusSchedule />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default AppBody\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// bus-schedule/duck/reducers.js\nimport * as types from './types'\n\nconst defaultState = {\n\ttripsArr: [],\n\tbusArr: [],\n\terrors: [],\n\tselectedTrip: null\n}\n\nexport default (state = defaultState, action) => {\n\tswitch (action.type) {\n\t\tcase types.ON_BUS_SCHEDULE_LOAD:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttripsArr: action.payload.updatedTripsArr,\n\t\t\t\tbusArr: action.payload.busArr,\n\t\t\t\tscheduleTimeInHours: action.payload.scheduleTimeInHours\n\t\t\t}\n\n\t\tcase types.ON_TRIP_SELECT:\n\t\t\tlet selectedTrip\n\t\t\tconst busOfSelectedTrip = state.busArr[action.payload.busIdx]\n\n\t\t\tif (\n\t\t\t\t// if user clicks currently selected trip\n\t\t\t\tstate.selectedTrip &&\n\t\t\t\taction.payload.trip.id === state.selectedTrip.id\n\t\t\t) {\n\t\t\t\tselectedTrip = null\n\t\t\t} else {\n\t\t\t\tselectedTrip = action.payload.trip\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tselectedTrip: selectedTrip,\n\t\t\t\tbusOfSelectedTrip: busOfSelectedTrip,\n\t\t\t\terrors: []\n\t\t\t}\n\n\t\tcase types.ON_ADD_PROVISIONAL_BUS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tbusArr: action.payload\n\t\t\t}\n\n\t\tcase types.ACCEPT_ASSIGN_TRIP:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tbusArr: action.payload.busArr,\n\t\t\t\tselectedTrip: null,\n\t\t\t\terrors: []\n\t\t\t}\n\n\t\tcase types.REJECT_ASSIGN_TRIP:\n\t\t\tconst error =\n\t\t\t\t'A bus can only do one trip at a time. Try a different time slot.'\n\t\t\tconst updatedErrors = state.errors\n\t\t\tupdatedErrors.push(error)\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tselectedTrip: null,\n\t\t\t\tbusArr: action.payload,\n\t\t\t\terrors: updatedErrors\n\t\t\t}\n\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n","import { combineReducers } from 'redux'\nimport busScheduleReducer from './app/bus-schedule/duck/reducers'\n\nconst rootReducer = combineReducers({\n\tbusSchedule: busScheduleReducer\n})\n\nexport default rootReducer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport AppBody from './app/AppBody'\nimport * as serviceWorker from './serviceWorker'\nimport rootReducer from './reducers'\nimport thunk from 'redux-thunk'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport logger from 'redux-logger'\n\nconst middleware = applyMiddleware(thunk, logger)\nconst store = createStore(rootReducer, middleware)\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<AppBody />\n\t</Provider>,\n\tdocument.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}